#! /bin/bash

install_nova_controller () {

 . /root/bomsi/lib/t_vars
 load_bomsi_functions
 . ~/admin-openrc.sh


  log_step ".  > Installing and configuring nova"
  log_step ".    > Creating MySQL users and databases for nova and nova_api"
  create_sql_user nova $NOVA_DB_PASSWORD

  # The nova_api database has a different user name
  # so we won't use the create_sql_user function
  ####create_sql_user nova_api $NOVA_DB_PASSWORD

   mysql -u root -p$MYSQL_ROOT <<-EOF
CREATE DATABASE nova_api;
GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' \
  IDENTIFIED BY '$NOVA_DB_PASSWORD';
GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' \
  IDENTIFIED BY '$NOVA_DB_PASSWORD';
EOF



  ## Create the user and endpoint for nova
  log_step ".    > Creating nova user, service and endpoints"
  openstack user create --domain default --password $NOVA_PASSWORD --email nova@os.mydomain.com nova
  openstack role add --project service --user nova admin

 openstack service create --name nova \
  --description "OpenStack Compute" compute

  openstack endpoint create --region RegionOne \
    compute public   http://controller:8774/v2.1/%\(tenant_id\)s
  openstack endpoint create --region RegionOne \
    compute internal http://controller:8774/v2.1/%\(tenant_id\)s
  openstack endpoint create --region RegionOne \
    compute admin    http://controller:8774/v2.1/%\(tenant_id\)s

  
  # Install packages
  #apt-get -y install nova-api nova-cert nova-conductor nova-consoleauth nova-novncproxy nova-scheduler python-novaclient
  log_step ".    > Installing nova packages"
  apt-get -y install nova-api nova-conductor nova-consoleauth \
  nova-novncproxy nova-scheduler

  ## Edit the configuration file of nova in the controller
  log_step ".    > Editing the configuration files with susti"
  TMPF="/etc/nova/nova.conf"
  susti $TMPF DEFAULT "enabled_apis = osapi_compute,metadata"

  #sed -i '/###connection=sqlite/d' $TMPF
  susti $TMPF api_database "connection = mysql+pymysql://nova:${NOVA_DB_PASSWORD}@controller/nova_api"
  susti $TMPF database "connection = mysql+pymysql://nova:${NOVA_DB_PASSWORD}@controller/nova"

  ### This hack is because susti will comment the second "connection" key
  #sed -i 's/###connection = mysql+pymysql.*nova_api/connection = mysql+pymysql:\/\/nova:Password@controller\/nova_api/' $TMPF

  susti $TMPF DEFAULT "rpc_backend = rabbit"
  susti $TMPF oslo_messaging_rabbit "rabbit_host = controller"
  susti $TMPF oslo_messaging_rabbit "rabbit_userid = openstack"
  susti $TMPF oslo_messaging_rabbit "rabbit_password = ${RABBIT_PASS}"
  susti $TMPF DEFAULT "auth_strategy = keystone"
  susti $TMPF keystone_authtoken "auth_uri = http://controller:5000"
  susti $TMPF keystone_authtoken "auth_url = http://controller:35357"
  susti $TMPF keystone_authtoken "memcached_servers = controller:11211"
  #susti $TMPF keystone_authtoken "auth_plugin = password"
  susti $TMPF keystone_authtoken "auth_type = password"
  #susti $TMPF keystone_authtoken "project_domain_id = default"
  susti $TMPF keystone_authtoken "project_domain_name = default"
  #susti $TMPF keystone_authtoken "user_domain_id = default"
  susti $TMPF keystone_authtoken "user_domain_name = default"
  susti $TMPF keystone_authtoken "project_name = service"
  susti $TMPF keystone_authtoken "username = nova"
  susti $TMPF keystone_authtoken "password = $NOVA_PASSWORD"


  MY_MGM_IP=$(ip addr show "$IFACE0" | grep inet | head -n 1 | awk '{print $2}' | cut -d/ -f1 | grep -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$')

  susti $TMPF DEFAULT "my_ip = $MY_MGM_IP"

  susti $TMPF DEFAULT "use_neutron = True"
  susti $TMPF DEFAULT "firewall_driver = nova.virt.firewall.NoopFirewallDriver"
  susti $TMPF vnc "vncserver_listen = \$my_ip" 
  susti $TMPF vnc "vncserver_proxyclient_address = \$my_ip" 
  #susti $TMPF glance "host = controller"
  susti $TMPF glance "host = http://controller:9292"
  susti $TMPF oslo_concurrency "lock_path = /var/lib/nova/tmp" 

  #susti $TMPF DEFAULT "network_api_class = nova.network.neutronv2.api.API"
  #susti $TMPF DEFAULT "security_group_api = neutron"
  #susti $TMPF DEFAULT "linuxnet_interface_driver = nova.network.linux_net.NeutronLinuxBridgeInterfaceDriver"
  #susti $TMPF DEFAULT "enabled_apis=osapi_compute,metadata"
  #susti $TMPF DEFAULT "verbose = True"

  # Bugs in packaging
  sed -i '/logdir/d' $TMPF
  sed -i '/verbose.*=/d' $TMPF
  sed -i '/api_paste_config/d' $TMPF
  susti $TMPF wsgi "api_paste_config = /etc/nova/api-paste.ini"

  # Populate the nova database
  log_step ".     > Populating nova and nova_api databases"
  su -s /bin/sh -c "nova-manage api_db sync" nova
  su -s /bin/sh -c "nova-manage db sync" nova

  # Restart compute services
  log_step ".     > Restarting services"
  service nova-api restart
  service nova-consoleauth restart
  service nova-scheduler restart
  service nova-conductor restart
  service nova-novncproxy restart

  # Delete the default SQLite database
  rm -f /var/lib/nova/nova.sqlite

  log_step ".   > Testing nova controller"
  SERVICES=$(openstack compute service list |grep enabled |wc -l)
  if [[ ! "$SERVICES" -le "3" ]]; then
     echo "!!! ERROR: NOVA SERVICES MISSING !!!"
     openstack compute service list |grep "nova-consoleauth" || echo "nova-consoleauth missing"
     openstack compute service list |grep "nova-scheduler" || echo "nova-consoleauth missing"
     openstack compute service list |grep "nova-conductor" || echo "nova-consoleauth missing"
  fi


}



