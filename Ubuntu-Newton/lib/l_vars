#! /bin/bash
##
## This file contains the variables used by BOMSI
## on the local machine
##


## Make sure that the output of the commands are in English
export LC_ALL=C

## Elegant function to set default variables if variables were not set
set_if_unset () {
    ## Usage: set_if_unset VARIABLE VALUE
    VAR=\$"$1" #Name of variable, not the value
    X=`eval "expr \"$VAR\" "`
    [ -z "$X" ] && eval "$1=$2"
  }

## DEFAULTS

## For building the ISO
set_if_unset BOOT_TIMEOUT 100 # timeout for the boot menu tines 10
set_if_unset OUT_DIR /tmp/custom_iso
set_if_unset OUT_ISO_DIR "$HOME"
set_if_unset OUT_ISO_NAME "BOMSI-Custom.iso"
set_if_unset ISO_DIR_PATH "$HOME/ISOS/"
set_if_unset BASE_ISO_NAME ubuntu-16.04-server-amd64.iso
#set_if_unset BASE_ISO_NAME ubuntu-14.04.4-server-amd64.iso
set_if_unset PATH_TO_ISO "$ISO_DIR_PATH/$BASE_ISO_NAME"/

set_if_unset USB_DISK_DEV "/dev/sdb"
 
## For the virtual environment

# Name of the target HD device (i.e. vda/sda)
set_if_unset HD vda
# Amount of virtual CPUs for the VM
set_if_unset VCPUS 4
# Virtual RAM in MB
set_if_unset VRAM 8184 #4092
# Virtual HD size in GB
set_if_unset DISK_SIZE 5
# Virtual network interface for the VM
set_if_unset VIRT_NIC_MAN 'network=management'


# Cirros image name
export CIRROS_IMG="cirros-0.3.4-x86_64-disk.img"




## Do we need a HTTP Proxy? Suggest to use the HTTP_PROXY variable if set.
#export SET_HTTP_PROXY_ADDR="http://http-proxy.example.com:81/"

if [ ! -z "$HTTP_PROXY" ]; then
   if [ -z "$SET_PROXY" ]; then
      echo 'WARNING: A $HTTP_PROXY variable was found'
      echo 'Do you want to use:'
      echo "     $HTTP_PROXY"
      read -p "as http-proxy for your environment? [Y/n] " -n 1 -r
      echo
      if [[ "$REPLY" =~ ^[Yy]$ ]]; then
          echo ">> Setting $HTTP_PROXY as HTTP_PROXY"
          export SET_HTTP_PROXY_ADDR="$HTTP_PROXY"
      fi
   else
      export SET_HTTP_PROXY_ADDR="$HTTP_PROXY"
   fi
elif [ ! -z "$USE_PROXY" ]; then
   export SET_HTTP_PROXY_ADDR="$USE_PROXY"
fi

## If SET_HTTP_PROXY_ADDR was set, set up the env variables
if [ ! -z "$SET_HTTP_PROXY_ADDR" ]; then
  . lib/t_vars
  ENV_PROXY="""
http_proxy=\\\"$SET_HTTP_PROXY_ADDR\\\"
https_proxy=\\\"$SET_HTTP_PROXY_ADDR\\\"
ftp_proxy=\\\"$SET_HTTP_PROXY_ADDR\\\"
no_proxy=\\\"localhost,127.0.1.1,controller, compute1, compute2, clean, packages\\\"
HTTP_PROXY=\\\"$SET_HTTP_PROXY_ADDR\\\"
HTTPS_PROXY=\\\"$SET_HTTP_PROXY_ADDR\\\"
FTP_PROXY=\\\"$SET_HTTP_PROXY_ADDR\\\"
NO_PROXY=\\\"localhost,127.0.1.1,controller, compute1, compute2, clean,packages\\\"
"""

  PROXY_LAST_PART=$(echo "$SET_HTTP_PROXY_ADDR" |awk -F// '{print $2}')

  # Triple-scape the qoutes because they are parsed twice
  export APT_PROXY="""Acquire::http::proxy \\\"http://$PROXY_LAST_PART\\\";
Acquire::ftp::proxy \\\"ftp://$PROXY_LAST_PART\\\";
Acquire::https::proxy \\\"https://$PROXY_LAST_PART\\\";"""
  
  #echo "$APT_PROXY" >> /etc/apt/apt.conf.d/95proxies

fi

ENV_PATH='PATH="/usr/local/sbin:/usr/local/bin/:/usr/sbin:/usr/bin:/sbin:/bin:/usr/bin:/root/bomsi/lib"'
ENV_VAR="""$ENV_PATH
$ENV_PROXY
"""

export ENV_VAR="$ENV_VAR"

## Some basic functions
log_step (){
  ## Usage: log_step 'Installing keystone'
  ## Write timestamp and sentence to /tmp/BOMSI_STEP.log
  DATE=`date +%Y-%m-%d:%H:%M:%S`
  echo $DATE " " $1 |tee -a /tmp/BOMSI_STEP.log
}

run_or_exit () {
  ## Usage: run_or_exit "ls ~/BOMSI-controller.iso"
  if ! eval $1 &> /dev/null; then
   printf "\033[0;31mFATAL ERROR: command '$1' did not work\nexiting\n
\033[0m"
   exit
  fi
} 

sustivar () {
# Substitute the value of a variable in this file
# Usage: sustivar "ROOT_PASSWORD=MyPassword"
  VAR=$(echo $1 |awk -F= '{print $1}')
  sed -i "s/export[ ]$VAR[ =].*/export $1/" $THISD/vars_openstack
  eval export $1
}




## ssh aliases for the machines
controller () { ssh-keygen -f "$HOME/.ssh/known_hosts" -R $IP_controller; sshpass -p $ROOT_PASSWORD ssh -o "StrictHostKeyChecking no" root@$IP_controller; }
network    () { ssh-keygen -f "$HOME/.ssh/known_hosts" -R $NEUTRON_NODE_IP; sshpass -p $ROOT_PASSWORD ssh -o "StrictHostKeyChecking no" root@$IP_neutron; }
compute1   () { ssh-keygen -f "$HOME/.ssh/known_hosts" -R $IP_compute1; sshpass -p $ROOT_PASSWORD ssh -o "StrictHostKeyChecking no" root@$IP_compute1; }
compute2   () { ssh-keygen -f "$HOME/.ssh/known_hosts" -R $IP_compute2; sshpass -p $ROOT_PASSWORD ssh -o "StrictHostKeyChecking no" root@$IP_compute2; }
compute3   () { ssh-keygen -f "$HOME/.ssh/known_hosts" -R $IP_compute3; sshpass -p $ROOT_PASSWORD ssh -o "StrictHostKeyChecking no" root@$IP_compute3; }
block      () { ssh-keygen -f "$HOME/.ssh/known_hosts" -R $BLOCK_IPS; sshpass -p $ROOT_PASSWORD ssh -o "StrictHostKeyChecking no" root@$BLOCK_IPS; }
block      () { ssh-keygen -f "$HOME/.ssh/known_hosts" -R $OBJECT_IP; sshpass -p $ROOT_PASSWORD ssh -o "StrictHostKeyChecking no" root@$OBJECT_IP; }
