#! /bin/bash

gen_vnet () {
  ## Usage: gen_vnet NAME NET virbr"N" (i.e. virbr1: gen_vnet management 10.0.0.1 1)
if [[ ! $(sudo virsh net-list |grep $1) ]]; then
echo ">> Generating virtual network: " $1 " with gateway on " $2

  ## Make sure that the subnet is not used by another bridge
if ip a |grep inet |grep $2 > /dev/null
 then
   OCC_IFACE=$(ip a |grep inet |grep 10.0.0.1 |awk 'NF>1{print $NF}')  
   echo "### ERROR: subnet $2 already in use by $OCC_IFACE"
   echo "### You might need to edit IPPR_A or IPPR_EXT variables in the lib/bomsi_vars file"
   exit
fi

NEW_MAC=$(printf '00:60:2F:%02X:%02X:%02X' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
NEXT_FREE_VIRT_IFACE=$(sudo brctl show |grep virbr |tail -1 |awk '{print $1}' |awk -Fvirbr '{print $2+1}') # The last +1 makes the increment
#((NEXT_FREE_VIRT_IFACE++)) # increment the last found value in one
cat > /tmp/xmlnetfile << EOF
<network connections='2'>
<name>$1</name>
<forward mode='nat'>
<nat>
<port start='1024' end='65535'/>
</nat>
</forward>
<bridge name='virbr$NEXT_FREE_VIRT_IFACE' stp='on' delay='0'/>
<mac address='$NEW_MAC'/>
<ip address='$2' netmask='255.255.255.0'>
</ip>
</network>
EOF

#virsh net-create /tmp/xmlnetfile #dissapears after reboot
sudo virsh net-define /tmp/xmlnetfile
sudo virsh net-start $1
sudo virsh net-autostart $1 
fi
}


start_iso_vm () {
  echo " "
  echo "------------------------"
  echo ">> Starting VM with qemu" 
  echo "------------------------"
  #set -e
  #set -x

  ## If KVM is not installed, install it

  #if [[ ! $(which virsh ) ]]
  # then 
  #    echo ">> Installing all the KVM packages: qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils acpid virtinst"
  #    sudo apt-get -y install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils acpid virtinst >> /tmp/installed_by_bomsi.log 
  #    sudo adduser $USER libvirtd > /dev/null
  #    sudo adduser $USER kvm > /dev/null
  #fi
  
  ## Make sure that the current user can use virsh properly
  getent group $USERNAME |grep libvirtd || sudo usermod -a -G libvirtd $USER > /dev/null
  getent group $USERNAME |grep kvm || sudo usermod -a -G kvm $USER > /dev/null


  #if [[ ! $( which virt-manager) ]]
  # then 
  #    echo ">> Installing all the virt-manager GUI"
  #    sudo apt-get -y install virt-manager qemu-system >> /tmp/installed_by_bomsi.log
  #    echo ">> The virt-manager GUI might not work properly until you reboot the system, but the VMs should work"
  #fi

  gen_vnet management ${IPPR_A}1
  gen_vnet ext-net ${IPPR_EXT}1
  #gen_vnet tunnel ${IPPR_T}1
  #gen_vnet storage ${IPPR_S}1

  if [ -z ${VM_NAME+x} ]; then # If VM name was not set... 
    TMPNAME="Ubuntu_OS-test"
  else 
    echo ">> The virtual machine (domain) will be called '$VM_NAME'"
    TMPNAME=$VM_NAME
  fi 

  if [ -z $VIRT_NIC_MAN ]; then VIRT_NIC_MAN="network=management"; fi
  
  ## Make sure the user has permission to create VMs
  sudo chmod 777 /var/lib/libvirt/images/  > /dev/null 
 
  ## Delete an old VM with the same name
  #virsh list --all |grep $TMPNAME |grep running > /dev/null && virsh destroy $TMPNAME 
  #virsh list --all |grep $TMPNAME > /dev/null && virsh undefine $TMPNAME
  #|| $TMPNAME does not exist yet
  #echo "TMPNAME="$TMPNAME


  vm_status=$(sudo virsh list |grep $TMPNAME|awk '{print $3}')
  if [ "$vm_status" == "running" ]; then
    sudo virsh destroy $TMPNAME > /dev/null && echo "VM $TMPNAME Down"
  fi

  vm_status=$(sudo virsh list --all |grep $TMPNAME|awk '{print $3}')
  echo "$(sudo virsh list |grep $TMPNAME)"
  if [ "$vm_status" == "shut" ]; then
    echo ">> Remove $TMPNAME and delete the associated virtual disk(s)"
    sudo virsh undefine $TMPNAME &> /dev/null
    sudo virsh vol-delete --pool default $TMPNAME.img &> /dev/null && echo "VM " $TMPNAME " succesfully removed"
    ## note to myself: for attached devices use something like virsh domblklist 1.object |grep img  
  fi

  ls /var/lib/libvirt/images/$TMPNAME.img 2> /dev/null && \
  echo ">> Removing file /var/lib/libvirt/images/$TMPNAME.img " && \
  sudo rm -rf /var/lib/libvirt/images/$TMPNAME.img &> /dev/null

  echo ">> Creating an emty file as a virtual disk as $TMPNAME.img with $DS Gb size"
  sudo qemu-img create -f qcow2 /var/lib/libvirt/images/$TMPNAME.qcow2 10G > /dev/null # ${DS}G 

  echo ">> Starting a Virtual Machine using the ISO $OUT_ISO_DIR/$OUT_ISO_NAME"
  
    echo ">> Using command:"
    echo """virt-install -n "$TMPNAME" --cpu host --vcpus $VCPUS -r $VRAM --os-type=linux --disk /var/lib/libvirt/images/${TMPNAME}.qcow2,device=disk,bus=virtio,size=10,sparse=true,format=qcow2 --network ${VIRT_NIC_MAN},model=virtio --network network=ext-net,model=virtio --vnc --noautoconsole -c ~/$OUT_ISO_NAME """ 

 virt-install -n "$TMPNAME" --cpu host --vcpus $VCPUS -r $VRAM --os-type=linux --disk /var/lib/libvirt/images/${TMPNAME}.qcow2,device=disk,bus=virtio,size=10,sparse=true,format=qcow2 --network ${VIRT_NIC_MAN},model=virtio --network network=ext-net,model=virtio --vnc --noautoconsole -c ~/$OUT_ISO_NAME

}





