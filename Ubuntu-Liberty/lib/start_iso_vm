#! /bin/bash

gen_vnet () {
  ## Creates a virtual network if not already present, and if subnet not already in use
  ## Usage: gen_vnet NAME NET virbr"N" (i.e. virbr1: gen_vnet management 10.0.0.1 1)
if [[ ! $(sudo virsh net-list |grep $1) ]]; then
echo ">> Generating virtual network: " $1 " with gateway on " $2

  ## Make sure that the subnet is not used by another bridge
  if ip a |grep inet |grep $2 > /dev/null
   then
     OCC_IFACE=$(ip a |grep inet |grep "$2" |awk 'NF>1{print $NF}')  
     printf "\033[0;31m### ERROR: subnet $2 already in use by $OCC_IFACE\033[0m\n"
     echo "### You might need to edit IPPR_A or IPPR_EXT variables in the lib/bomsi_vars file"
     exit
  fi

NEW_MAC=$(printf '00:60:2F:%02X:%02X:%02X' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
NEXT_FREE_VIRT_IFACE=$(sudo brctl show |grep virbr |tail -1 |awk '{print $1}' |awk -Fvirbr '{print $2+1}') # The last +1 makes the increment

  ## If not even the "default" net is present (SUSE) start from "virbr0"
[ -z $NEXT_FREE_VIRT_IFACE ] && NEXT_FREE_VIRT_IFACE="1"

cat > /tmp/xmlnetfile << EOF
<network connections='2'>
<name>$1</name>
<forward mode='nat'>
<nat>
<port start='1024' end='65535'/>
</nat>
</forward>
<bridge name='virbr$NEXT_FREE_VIRT_IFACE' stp='on' delay='0'/>
<mac address='$NEW_MAC'/>
<ip address='$2' netmask='255.255.255.0'>
</ip>
</network>
EOF

#virsh net-create /tmp/xmlnetfile #dissapears after reboot
eval sudo virsh net-define /tmp/xmlnetfile $SILENCER
eval sudo virsh net-start $1 $SILENCER
eval sudo virsh net-autostart $1 $SILENCER
fi
}


start_iso_vm () {
  echo " "
  echo "------------------------"
  echo ">> Starting VM with qemu"
  echo "------------------------"
  #set -e
  #set -x

  ## Make sure that the current user can use virsh properly

  ## Usage: add_user_to_group USER GROUP
  add_user_to_group () { getent group $1 |grep $2 || eval sudo usermod -a -G $2 $1 $SILENCER; }
  
  for GROUP_I in $KVM_GROUPS; do 
    add_user_to_group $USER $GROUP_I
    add_user_to_group root  $GROUP_I
  done
   

  ## Check that the virsh commands work
  virsh list &> /dev/null || eval $PKG_CMD libvirt-bin $SILENCER
  run_or_exit "sudo virsh list"
  run_or_exit "sudo virt-install --version"

  ## If KVM GUI is not installed, install it
  if [[ ! $( which virt-manager) ]]
   then 
      echo ">> Installing all the virt-manager GUI"
      eval $PKG_CMD virt-manager $SILENCER
      printf "\033[0;33mWARNING: The virt-manager GUI might not work properly until you log again into the system. i.e.: open another terminal.\033[0m\n"
      echo "As a workaround we'll exectute 'su - $USER' and try the bomsi command again"
      ## for some reason this directory has sometimes wrong permissions
      [ -d "~/.cache/virt-manager" ] && touch ~/.cache/virt-manager/virt-install.log || eval sudo chown -R $USER ~/.cache/virt-manager/ $SILENCER
      echo ">> Starting the virt-manager GUI"
      eval sudo su $USER -c virt-manager $SILENCER
  fi

  # Start the virt-manager GUI if it is not running already  
  ps -aef |grep $USER |grep virt-manager > /dev/null || eval virt-manager $SILENCER &


  gen_vnet management ${IPPR_A}1
  gen_vnet ext-net ${IPPR_EXT}1
  ## Exit if networks were not properly generated
  run_or_exit "sudo virsh net-list |grep management"
  run_or_exit "sudo virsh net-list |grep ext-net"

  if [ -z ${VM_NAME+x} ]; then # If VM name was not set... 
    TMPNAME="Ubuntu_OS-test"
  else 
    echo ">> The virtual machine (domain) will be called '$VM_NAME'"
    TMPNAME=$VM_NAME
  fi 

  if [ -z $VIRT_NIC_MAN ]; then VIRT_NIC_MAN="network=management"; fi
  
  ## Make sure the user has permission to create VMs
  eval sudo chmod 777 /var/lib/libvirt/images/ $SILENCER
 
  ## Stop an old VM with the same name
  vm_status=$(sudo virsh list |grep $TMPNAME|awk '{print $3}')
  if [ "$vm_status" == "running" ]; then
    eval sudo virsh destroy $TMPNAME $SILENCER && echo "VM " $TMPNAME " Down"
  fi

  ## Delete an old VM with the same name
  vm_status=$(sudo virsh list --all |grep $TMPNAME|awk '{print $3}')
  #echo "$(sudo virsh list |grep $TMPNAME)"
  if [ "$vm_status" == "shut" ]; then
    echo ">> Remove $TMPNAME and delete the associated virtual disk(s)" $MUTE
    eval sudo virsh undefine $TMPNAME $SILENCER
    eval sudo virsh vol-delete --pool default $TMPNAME.img $SILENCER && echo "VM " $TMPNAME " succesfully removed"
    ## note to myself: for attached devices use something like virsh domblklist 1.object |grep img  
  fi

  eval ls /var/lib/libvirt/images/$TMPNAME.img $SILENCER && eval sudo rm -rf /var/lib/libvirt/images/$TMPNAME.img $SILENCER


  ## This is to fix some bug with generating the default pool the first time
  TOTALPOOLS=$(sudo virsh -q pool-list)
  TOTALVMS=$(sudo virsh -q list --all) 
  FILESINVAR=$(sudo ls /var/lib/libvirt/images)
  if [ "$TOTALPOOLS" == "" ]; then
     echo ">> There are no predefined pools, trying a workaround..."
     if [ "$TOTALVMS" == "" ]; then
          if [ "$FILESINVAR" == "" ]; then
            echo ">> There are no virsh pools, no VMs and image dir is emty."
            echo ">> Removing /var/lib/libvirt/images/ directory."
            eval sudo rm -rf /var/lib/libvirt/images $SILENCER
          else
            printf "\033[0;31m** ERROR: there are no pools defined, but there are still files on /var/lib/libvirt/images/ directory, so we cannot remove it\n\033[0m" && exit
          fi
     fi
  fi





  echo ">> Creating an emty file as a virtual disk as $TMPNAME.img with $DS Gb size"
  eval qemu-img create -f qcow2 /var/lib/libvirt/images/$TMPNAME.qcow2 ${DS}G $SILENCER

  echo ">> Starting a Virtual Machine using the ISO $OUT_ISO_DIR/$OUT_ISO_NAME"
  
    echo ">> Using command:"
    printf """\033[0;34m eval sudo virt-install -n "$TMPNAME" --cpu host --vcpus $VCPUS -r $VRAM --os-type=linux --disk /var/lib/libvirt/images/${TMPNAME}.qcow2,device=disk,bus=virtio,size=10,sparse=true,format=qcow2 --network ${VIRT_NIC_MAN},model=virtio --network network=ext-net,model=virtio --vnc --noautoconsole -c ~/$OUT_ISO_NAME --force $SILENCER \n\033[0m"""

 eval sudo  virt-install -n "$TMPNAME" --cpu host --vcpus $VCPUS -r $VRAM --os-type=linux --disk /var/lib/libvirt/images/${TMPNAME}.qcow2,device=disk,bus=virtio,size=10,sparse=true,format=qcow2 --network ${VIRT_NIC_MAN},model=virtio --network network=ext-net,model=virtio --vnc --noautoconsole -c ~/$OUT_ISO_NAME --force $SILENCER

}

