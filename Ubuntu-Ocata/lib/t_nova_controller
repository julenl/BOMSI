#! /bin/bash

install_nova_controller () {

 . /root/bomsi/lib/t_vars
 . /root/bomsi/lib/l_vars
 load_bomsi_functions
 . ~/admin-openrc.sh


  log_step ".  > Installing and configuring nova"
  log_step ".    > Creating MySQL users and databases for nova and nova_api"
  #create_sql_user nova $NOVA_DB_PASSWORD

  sql_user_db nova nova       $NOVA_DB_PASSWORD
  sql_user_db nova nova_api   $NOVA_DB_PASSWORD
  sql_user_db nova nova_cell0 $NOVA_DB_PASSWORD

  # The nova_api database has a different user name
  # so we won't use the create_sql_user function
  ####create_sql_user nova_api $NOVA_DB_PASSWORD

#   mysql -u root -p$MYSQL_ROOT <<-EOF
#CREATE DATABASE nova_api;
#GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' \
#  IDENTIFIED BY '$NOVA_DB_PASSWORD';
#GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' \
#  IDENTIFIED BY '$NOVA_DB_PASSWORD';
#
#CREATE DATABASE nova_cell0;
#GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'localhost' \
#  IDENTIFIED BY '$NOVA_DB_PASSWORD';
#GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'%' \
#  IDENTIFIED BY '$NOVA_DB_PASSWORD';
#EOF



  ## Create the user and endpoint for nova
  log_step ".    > Creating nova user, service and endpoints"
  openstack user create --domain default --password $NOVA_PASSWORD nova
  # --email nova@os.mydomain.com
  openstack role add --project service --user nova admin

  openstack service create --name nova \
  --description "OpenStack Compute" compute

  openstack endpoint create --region RegionOne \
    compute public   http://controller:8774/v2.1
  openstack endpoint create --region RegionOne \
    compute internal http://controller:8774/v2.1
  openstack endpoint create --region RegionOne \
    compute admin    http://controller:8774/v2.1



  openstack user create --domain default  \
    --password "$PLACEMENT_PASSWORD" placement

  openstack role add --project service \
    --user placement admin

  check_output "openstack role assignment list --user placement" 


  openstack service create --name placement \
    --description "Placement API" placement

  echo "Creating nova endpoints."
  openstack endpoint create --region RegionOne \
    placement public http://controller:8778

  openstack endpoint create --region RegionOne \
    placement internal http://controller:8778

  openstack endpoint create --region RegionOne \
    placement admin http://controller:8778



  
  # Install packages
  #apt-get -y install nova-api nova-cert nova-conductor nova-consoleauth nova-novncproxy nova-scheduler python-novaclient
  log_step ".    > Installing nova packages"
  apt-get -y install nova-api nova-conductor nova-consoleauth \
  nova-novncproxy nova-scheduler nova-placement-api

  ## Edit the configuration file of nova in the controller
  log_step ".    > Editing the configuration files with susti"
  TMPF="/etc/nova/nova.conf"
  #susti $TMPF DEFAULT "enabled_apis = osapi_compute,metadata"

  #sed -i '/###connection=sqlite/d' $TMPF
  susti $TMPF api_database "connection = mysql+pymysql://nova:${NOVA_DB_PASSWORD}@controller/nova_api"
  susti $TMPF database "connection = mysql+pymysql://nova:${NOVA_DB_PASSWORD}@controller/nova"


  susti $TMPF DEFAULT "transport_url = rabbit://openstack:${RABBIT_PASS}@controller"
  susti $TMPF api "auth_strategy = keystone"

  ## Remove DEF libvirt_use_virtio_for_bridges api_paste_config lock_path log_dir

  #susti $TMPF DEFAULT "rpc_backend = rabbit"
  #susti $TMPF oslo_messaging_rabbit "rabbit_host = controller"
  #susti $TMPF oslo_messaging_rabbit "rabbit_userid = openstack"
  #susti $TMPF oslo_messaging_rabbit "rabbit_password = ${RABBIT_PASS}"
  #susti $TMPF DEFAULT "auth_strategy = keystone"
  susti $TMPF keystone_authtoken "auth_uri = http://controller:5000"
  susti $TMPF keystone_authtoken "auth_url = http://controller:35357"
  susti $TMPF keystone_authtoken "memcached_servers = controller:11211"
  susti $TMPF keystone_authtoken "auth_type = password"
  susti $TMPF keystone_authtoken "project_domain_name = default"
  susti $TMPF keystone_authtoken "user_domain_name = default"
  susti $TMPF keystone_authtoken "project_name = service"
  susti $TMPF keystone_authtoken "username = nova"
  susti $TMPF keystone_authtoken "password = $NOVA_PASSWORD"


  MY_MGM_IP=$(ip addr show "$IFACE0" | grep inet | head -n 1 | awk '{print $2}' | cut -d/ -f1 | grep -E '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$')

  susti $TMPF DEFAULT "my_ip = $MY_MGM_IP"

  susti $TMPF DEFAULT "use_neutron = True"
  susti $TMPF DEFAULT "firewall_driver = nova.virt.firewall.NoopFirewallDriver"
  susti $TMPF vnc "vncserver_listen = \$my_ip" 
  susti $TMPF vnc "vncserver_proxyclient_address = \$my_ip" 
  susti $TMPF vnc "enabled = true" 

  susti $TMPF oslo_concurrency "lock_path = /var/lib/nova/tmp" 

  ## Bugs inschedulerg
  sed -i '/^log-dir/d' $TMPF
  #sed -i '/verbose.*=/d' $TMPF
  #sed -i '/api_paste_config.*=/d' $TMPF
  #sed -i '/use_virtio_bridges.*=/d' $TMPF
  #susti $TMPF wsgi "api_paste_config = /etc/nova/api-paste.ini"

  susti $TMPF placement "os_region_name = RegionOne"
  susti $TMPF placement "project_domain_name = Default"
  susti $TMPF placement "project_name = service"
  susti $TMPF placement "auth_type = password"
  susti $TMPF placement "user_domain_name = Default"
  susti $TMPF placement "auth_url = http://controller:35357/v3"
  susti $TMPF placement "username = placement"
  susti $TMPF placement "password = ${PLACEMENT_PASSWORD}"

  ## Auto discover new compute nodes
  susti $TMPF scheduler "discover_hosts_in_cells_interval = 300"

  # Stuff I learned from the config from Roger in training-labs
  # which made this thing work!! :D
  #susti $TMPF DEFAULT "libvirt_use_virtio_for_bridges = True"
  #susti $TMPF DEFAULT "lock_path = /var/lock/nova"
  #susti $TMPF DEFAULT "api_paste_config = /etc/nova/api-paste.ini"
  susti $TMPF glance "api_servers = http://controller:9292"


  # Populate the nova database
  log_step ".     > Populating nova and nova_api databases"

  ## The order of these commands is very important, otherwise the DBs
  ## won't be populated properly
  ## I am putting a couple of sleeps here because otherwise the databases
  ## get messed up for some reason

  #echo 'su -s /bin/sh -c "nova-manage api_db sync" nova'
  #su -s /bin/sh -c "
  nova-manage api_db sync
  sleep 2
  #" nova
  #echo
  #echo 'nova-manage cell_v2 list_cells'
  #nova-manage cell_v2 list_cells
  #echo
  #echo 'su -s /bin/sh -c "nova-manage cell_v2 map_cell0" nova'
  #su -s /bin/sh -c "
  nova-manage cell_v2 map_cell0
  sleep 2
  #" nova
  #echo
  #echo 'su -s /bin/sh -c "nova-manage cell_v2 create_cell --name=cell1 --verbose" nova'
  #su -s /bin/sh -c "
  nova-manage cell_v2 create_cell --name=cell1 --verbose
  sleep 2
  #" nova
  #echo
  #echo 'su -s /bin/sh -c "nova-manage db sync" nova'
  #su -s /bin/sh -c "
  nova-manage db sync
  sleep 2
  #" nova
  #echo
  #echo "The command nova-manage cell_v2 list_cells should show cell and cell0"
  #nova-manage cell_v2 list_cells

  check_output "nova-manage cell_v2 list_cells" "cell0"
  check_output "nova-manage cell_v2 list_cells" "cell1"

  # Restart compute services
  log_step ".     > Restarting services"
  service nova-api restart
  service nova-consoleauth restart
  service nova-scheduler restart
  service nova-conductor restart
  service nova-novncproxy restart

  systemctl status nova-api nova-consoleauth nova-scheduler nova-conductor nova-novncproxy

  # Delete the default SQLite database
  rm -v /var/lib/nova/nova.sqlite

  log_step ".   > Testing nova controller"
  SERVICES=$(openstack compute service list |grep enabled |wc -l)
  if [[ ! "$SERVICES" -le "3" ]]; then
     echo "!!! ERROR: NOVA SERVICES MISSING !!!"
     openstack compute service list |grep "nova-consoleauth" || echo "nova-consoleauth missing"
     openstack compute service list |grep "nova-scheduler" || echo "nova-consoleauth missing"
     openstack compute service list |grep "nova-conductor" || echo "nova-consoleauth missing"
  else
     echo "It seems OK"
  fi


}



