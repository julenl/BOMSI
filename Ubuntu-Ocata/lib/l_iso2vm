#! /usr/bin/env bash

gen_vnet () {
  ## Creates a virtual network if not already present, and if subnet not already in use
  ## Usage: gen_vnet NAME NET virbr"N" (i.e. virbr1: gen_vnet management 10.0.0.1 1)
	if [[ ! $(virsh ${HYPERVISOR_CONNECT} net-list --all | grep $1) ]]; then
echo ">> Generating virtual network: " $1 " with gateway on " $2

  ## Make sure that the subnet is not used by another bridge
  if ip a |grep inet |grep $2 > /dev/null
   then
     OCC_IFACE=$(ip a |grep inet |grep "$2" |awk 'NF>1{print $NF}')  
     printf "\033[0;31m### ERROR: subnet $2 already in use by $OCC_IFACE\033[0m\n"
     echo "### You might need to edit IPPR_A or IPPR_EXT variables in the lib/bomsi_vars file"
     exit
  fi

## Debian does not include /sbin on the PATH
brctl || export PATH=$PATH:/sbin

NEW_MAC=$(printf '00:60:2F:%02X:%02X:%02X' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
NEXT_FREE_VIRT_IFACE=$(brctl show |grep virbr |tail -1 |awk '{print $1}' |awk -Fvirbr '{print $2+1}') # The last +1 makes the increment

  ## If not even the "default" net is present (SUSE) start from "virbr0"
[ -z $NEXT_FREE_VIRT_IFACE ] && NEXT_FREE_VIRT_IFACE="1"

cat > /tmp/xmlnetfile << EOF
<network connections='2'>
<name>$1</name>
<forward mode='nat'>
<nat>
<port start='1024' end='65535'/>
</nat>
</forward>
<bridge name='virbr$NEXT_FREE_VIRT_IFACE' stp='on' delay='0'/>
<mac address='$NEW_MAC'/>
<ip address='$2' netmask='255.255.255.0'>
</ip>
</network>
EOF

#virsh net-create /tmp/xmlnetfile #dissapears after reboot
eval virsh ${HYPERVISOR_CONNECT} net-define /tmp/xmlnetfile $SILENCER
eval virsh ${HYPERVISOR_CONNECT} net-start $1 $SILENCER
eval virsh ${HYPERVISOR_CONNECT} net-autostart $1 $SILENCER
fi
}


start_iso_vm () {
  echo " "
  echo "------------------------"
  echo ">> Starting VM with qemu"
  echo "------------------------"
  #set -e
  #set -x
  source lib/l_vars

  
  #virsh list &> /dev/null || echo "ERROR: If 'virsh list' does not work, it's probably because you just installed libvirt. Try to restart/relog-in." 

  run_or_exit "virsh ${HYPERVISOR_CONNECT} list"
  run_or_exit "virt-install --version"


  # Pop-up the virt-manager GUI if we are running with X environment  
  if [[ $TERM == *"xterm"* ]];then
    eval virt-manager $SILENCER 
  else
    echo 'It seems we have a headless hypervisor.'
    NOGRAPHICS=' --nographics '
  fi

  gen_vnet management ${IPPR_A}1
  gen_vnet ext-net ${IPPR_EXT}1
  ## Exit if networks were not properly generated
  run_or_exit "virsh ${HYPERVISOR_CONNECT} net-list |grep management"
  run_or_exit "virsh ${HYPERVISOR_CONNECT} net-list |grep ext-net"

  if [ -z ${VM_NAME+x} ]; then # If VM name was not set... 
    TMPNAME="Ubuntu_OS-test"
  else 
    echo ">> The virtual machine (domain) will be called '$VM_NAME'"
    TMPNAME=$VM_NAME
  fi 

  if [ -z $VIRT_NIC_MAN ]; then VIRT_NIC_MAN="network=management"; fi
  
 
  ## Stop an old VM with the same name
  vm_status=$(virsh ${HYPERVISOR_CONNECT} list |grep $TMPNAME|awk '{print $3}')
  if [ "$vm_status" == "running" ]; then
    eval virsh ${HYPERVISOR_CONNECT} destroy $TMPNAME $SILENCER && echo "VM " $TMPNAME " Down"
  fi

  ## Delete an old VM with the same name
  vm_status=$(virsh ${HYPERVISOR_CONNECT} list --all|grep $TMPNAME|awk '{print $3}')
  if [ "$vm_status" == "shut" ]; then
    echo ">> Remove $TMPNAME and delete the associated virtual disk(s)" $MUTE
    eval virsh ${HYPERVISOR_CONNECT} undefine $TMPNAME $SILENCER
    eval virsh ${HYPERVISOR_CONNECT} vol-delete --pool default $TMPNAME.qcow2 $SILENCER && echo "VM " $TMPNAME " succesfully removed"
    ## note to myself: for attached devices use something like virsh domblklist 1.object |grep img  
  fi

  eval ls /var/lib/libvirt/images/$TMPNAME.img $SILENCER && eval rm -f /var/lib/libvirt/images/$TMPNAME.img $SILENCER





    echo ">> Creating an emty file as a virtual disk as $TMPNAME.img with $DISK_SIZE Gb size"
    eval qemu-img create -f qcow2 /var/lib/libvirt/images/$TMPNAME.qcow2 ${DISK_SIZE}G $SILENCER


    echo ">> Starting a Virtual Machine using the ISO $OUT_ISO_DIR/$OUT_ISO_NAME"

    #CMD="virt-install -n "$TMPNAME" --cpu host --vcpus $VCPUS -r $VRAM --os-type=linux --disk /var/lib/libvirt/images/${TMPNAME}.qcow2,device=disk,bus=virtio,size=10,sparse=true,format=qcow2 --network ${VIRT_NIC_MAN},model=virtio --network network=ext-net,model=virtio --vnc --wait=-1 -c ~/$OUT_ISO_NAME --force $SILENCER"
    VM_FILENAME="/var/lib/libvirt/images/${TMPNAME}.qcow2"

    ## Get the acceptable os-variants with: osinfo-query os |grep Ubuntu
    #OS_VARIANT='ubuntu16.04'
    #--os-variant $OS_VARIANT

    CMD="$VIRT_INST_CMD $HYPERVISOR_CONNECT -n "$TMPNAME" --cpu host --vcpus $VCPUS -r $VRAM \
      --os-type=linux --wait=-1 $NOGRAPHICS \
      --disk ${VM_FILENAME},device=disk,bus=virtio,size=${DISK_SIZE},sparse=true,format=qcow2 \
      --network ${VIRT_NIC_MAN},model=virtio \
      --network network=ext-net,model=virtio \
      -c ${OUT_ISO_DIR}/$OUT_ISO_NAME --force $SILENCER"

    echo ">> Using command:"
    printf """\033[0;34m eval $CMD \n\033[0m"""

    eval $CMD

}



# If the INSTALL_VM variable was set, run the start_iso_vm function defined above

if [ -z ${INSTALL_VM+x} ]; then 
  echo ">> Not starting VM."
else

    echo ">> Starting VM with the ISO"

    # If we just installed virt-manager virsh will complain about an error connecting to the socket
    # to avoid that, if 'virsh list' returns an error, we'll run the command on a new environment

    OUT_VIRSH=$(virsh list 2>&1 |grep "error: Failed to connect socket to")
    if [[ -z $OUT_VIRSH ]];then
        $NEW_ENV_S $NEW_ENV_Q start_iso_vm $NEW_ENV_Q 
    else
      # The user is still not in the KVM groups
      echo "ERROR: starting VMs without belonging to the KVM group is still not supported."
      echo "       A quick fix is to reboot or re-log in."
      echo "exiting..."
      exit
      #   echo "Using sudo rights to run: sudo -Eu $USER 'start_iso_vm'"
      #   set -a
      #   export -f start_iso_vm
      #   export -f gen_vnet
      #   sudo -Eu $USER bash -c 'start_iso_vm'
    fi

    #run_or_exit "[ -f  $OUT_ISO_DIR/$OUT_ISO_NAME ]"

    #T_CMD="$NEW_ENV_S virsh list $NEW_ENV_E"
    #run_or_exit "$T_CMD"

    #run_or_exit "echo \"virsh list | grep $VM_NAME\" |bash "
    printf "\033[0;32m   BOMSI started successfully the VM $VM_NAME   :) \n\033[0m" 
fi



