#! /bin/bash
##
## This file contains the variables used by BOMSI
## on the local machine
##


## Make sure that the output of the commands are in English
export LC_ALL=C

## Elegant function to set default variables if variables were not set
set_if_unset () {
    ## Usage: set_if_unset VARIABLE VALUE(possible multiple words)
    ## VAL is all arguments in the line execept the first one
    VAL="${@:2}"
    VAR=\$"$1" #Name of variable, not the value
    X=`eval "expr \"$VAR\" "`
    [ -z "$X" ] && eval "export $1=\"${VAL}\""
  }

## DEFAULTS

## For building the ISO
set_if_unset BOOT_TIMEOUT 100 # timeout for the boot menu tines 10
set_if_unset OUT_DIR /tmp/custom_iso
#set_if_unset OUT_ISO_DIR "$HOME"
set_if_unset OUT_ISO_DIR "/var/lib/libvirt/images"
set_if_unset OUT_ISO_NAME "BOMSI-Custom.iso"
set_if_unset ISO_DIR_PATH "$HOME/ISOS/"
#set_if_unset BASE_ISO_NAME ubuntu-16.04-server-amd64.iso
set_if_unset BASE_ISO_NAME ubuntu-16.04.2-server-amd64.iso
#set_if_unset BASE_ISO_NAME ubuntu-14.04.4-server-amd64.iso
set_if_unset PATH_TO_ISO "${ISO_DIR_PATH}${BASE_ISO_NAME}"

set_if_unset USB_DISK_DEV "/dev/sdb"

## For the virtual environment

## KVM hypervisor
set_if_unset HYPERVISOR_CONNECT "-c qemu:///system"
## To use with some external hypervisor uncomment and edit username and IP
# export HYPERVISOR_CONNECT='-c qemu+ssh://username@192.168.0.5/system'

# Name of the target HD device (i.e. vda/sda)
set_if_unset HD vda
# Amount of virtual CPUs for the VM
set_if_unset VCPUS 4
# Virtual RAM in MB
set_if_unset VRAM 8184 #4092
# Virtual HD size in GB
set_if_unset DISK_SIZE 7
# Virtual network interface for the VM
set_if_unset VIRT_NIC_MAN 'network=management'


# Cirros image name
export CIRROS_IMG="cirros-0.3.4-x86_64-disk.img"

## Some basic functions
log_step (){
  ## Usage: log_step 'Installing keystone'
  ## Write timestamp and sentence to /tmp/BOMSI_STEP.log
  DATE=`date +%Y-%m-%d:%H:%M:%S`
  echo $DATE " " $1 |tee -a /tmp/BOMSI_STEP.log
}

run_or_exit () {
  ## Usage: run_or_exit "ls ~/BOMSI-controller.iso"
  if ! eval $1 &> /dev/null; then
   printf "\033[0;31mFATAL ERROR: command '$1' did not work\nexiting\n
\033[0m"
   exit
  fi
}

check_output () {
  ## Checks that the given command exits without error and greps the second value
  ## Usage: check_ouput "ls /etc/nova/" ["nova.conf"]
  eval "$1" > /dev/null || echo "ERROR: the command '$1' exited with non 0 status."
 
  if ! [ -z $2 ]; then
    eval "$1" | grep -q "$2" || \
    echo "ERROR: the output of the command '$1' does not contain the string '$2'"
  fi
   
}

sustivar () {
# Substitute the value of a variable in this file
# Usage: sustivar "ROOT_PASSWORD=MyPassword"
  VAR=$(echo $1 |awk -F= '{print $1}')
  sed -i "s/export[ ]$VAR[ =].*/export $1/" $THISD/vars_openstack
  eval export $1
}




## ssh aliases for the machines
controller () { ssh-keygen -f "$HOME/.ssh/known_hosts" -R $IP_controller; sshpass -p $ROOT_PASSWORD ssh -o "StrictHostKeyChecking no" root@$IP_controller; }
network    () { ssh-keygen -f "$HOME/.ssh/known_hosts" -R $NEUTRON_NODE_IP; sshpass -p $ROOT_PASSWORD ssh -o "StrictHostKeyChecking no" root@$IP_neutron; }
compute1   () { ssh-keygen -f "$HOME/.ssh/known_hosts" -R $IP_compute1; sshpass -p $ROOT_PASSWORD ssh -o "StrictHostKeyChecking no" root@$IP_compute1; }
compute2   () { ssh-keygen -f "$HOME/.ssh/known_hosts" -R $IP_compute2; sshpass -p $ROOT_PASSWORD ssh -o "StrictHostKeyChecking no" root@$IP_compute2; }
compute3   () { ssh-keygen -f "$HOME/.ssh/known_hosts" -R $IP_compute3; sshpass -p $ROOT_PASSWORD ssh -o "StrictHostKeyChecking no" root@$IP_compute3; }
block      () { ssh-keygen -f "$HOME/.ssh/known_hosts" -R $BLOCK_IPS; sshpass -p $ROOT_PASSWORD ssh -o "StrictHostKeyChecking no" root@$BLOCK_IPS; }
block      () { ssh-keygen -f "$HOME/.ssh/known_hosts" -R $OBJECT_IP; sshpass -p $ROOT_PASSWORD ssh -o "StrictHostKeyChecking no" root@$OBJECT_IP; }
